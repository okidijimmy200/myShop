Building an Online Shop::
In this chapter, you will learn how to:
• Create a product catalog
• Build a shopping cart using Django sessions
• Create custom context processors
• Manage customer orders
• Configure Celery in your project with RabbitMQ as a message broker
• Send asynchronous notifications to customers using Celery
• Monitor Celery using Flower

Lecture 1:
Creating an online shop project
--Let's start with a new Django project to build an online shop. Your users will be
able to browse through a product catalog and add products to a shopping cart.
Finally, they will be able to check out the cart and place an order.

• Creating the product catalog models, adding them to the administration site,
and building the basic views to display the catalog
• Building a shopping cart system using Django sessions to allow users to keep
selected products while they browse the site
• Creating the form and functionality to place orders on the site
• Sending an asynchronous email confirmation to users when they place
an order

--For the price field, you use DecimalField instead of FloatField to avoid
rounding issues.

install pillow
**************pip install Pillow==7.0.0************

run
**************python manage.py makemigrations*********

then run
*************python manage.py migrate*********

Lecture 2:
Registering catalog models on the administration site
--dd models to admin for quickand easy managing categories and products

--You use the list_editable attribute in the ProductAdmin class to set the fields that
can be edited from the list display page of the administration site

run
******************python manage.py createsuperuser***************8

then open
******http://127.0.0.1:8000/admin/shop/product/add/*****

Lecture 3:
Building catalog views::
--In order to display the product catalog, you need to create a view to list all the
products or filter products by a given category.

--The product_detail view expects the id and slug parameters in order to
retrieve the Product instance.

--the slug in the URL to build SEO-friendly URLs for products.

--You have defined two different URL patterns for the product_list view: a pattern named product_list,
which calls the product_list view without any parameters,

--You added a pattern for
the product_detail view, which passes the id and slug parameters to the view
in order to retrieve a specific product.

