Building an Online Shop::
In this chapter, you will learn how to:
• Create a product catalog
• Build a shopping cart using Django sessions
• Create custom context processors
• Manage customer orders
• Configure Celery in your project with RabbitMQ as a message broker
• Send asynchronous notifications to customers using Celery
• Monitor Celery using Flower

Lecture 1:
Creating an online shop project
--Let's start with a new Django project to build an online shop. Your users will be
able to browse through a product catalog and add products to a shopping cart.
Finally, they will be able to check out the cart and place an order.

• Creating the product catalog models, adding them to the administration site,
and building the basic views to display the catalog
• Building a shopping cart system using Django sessions to allow users to keep
selected products while they browse the site
• Creating the form and functionality to place orders on the site
• Sending an asynchronous email confirmation to users when they place
an order

--For the price field, you use DecimalField instead of FloatField to avoid
rounding issues.

install pillow
**************pip install Pillow==7.0.0************

run
**************python manage.py makemigrations*********

then run
*************python manage.py migrate*********

Lecture 2:
Registering catalog models on the administration site
--dd models to admin for quickand easy managing categories and products

--You use the list_editable attribute in the ProductAdmin class to set the fields that
can be edited from the list display page of the administration site

run
******************python manage.py createsuperuser***************8

then open
******http://127.0.0.1:8000/admin/shop/product/add/*****

Lecture 3:
Building catalog views::
--In order to display the product catalog, you need to create a view to list all the
products or filter products by a given category.

--The product_detail view expects the id and slug parameters in order to
retrieve the Product instance.

--the slug in the URL to build SEO-friendly URLs for products.

--You have defined two different URL patterns for the product_list view: a pattern named product_list,
which calls the product_list view without any parameters,

--You added a pattern for
the product_detail view, which passes the id and slug parameters to the view
in order to retrieve a specific product.

Lecture 4:
Creating catalog templates
--uses the categories context variable to display all the categories in a sidebar, and
products to display the products of the current page.

Lecture 4:
Building a shopping cart::
--create a shopping cart so that users can pick the products that they want to purchase.
--A shopping cart allows
users to select products and set the amount they want to order, and then store this
information temporarily while they browse the site, until they eventually place an
order. The cart has to be persisted in the session so that the cart items are maintained
during a user's visit.

--The cart will be kept in
the session until it finishes or the user checks out of the cart. You will also need to
build additional Django models for the cart and its items.

Using Django sessions::
---Django provides a session framework that supports anonymous and user sessions.
The session framework allows you to store arbitrary data for each visitor. Session
data is stored on the server side, and cookies contain the session ID unless you use
the cookie-based session engine. The session middleware manages the sending and
receiving of cookies. The default session engine stores session data in the database,
but you can choose other session engines.

--'django.contrib.sessions.middleware.SessionMiddleware'. This
middleware manages sessions
--The session middleware makes the current session available in the request object
You can access the current session using request.session,

--When users log in to the site, their anonymous session is lost and
a new session is created for authenticated users. If you store items
in an anonymous session that you need to keep after the user logs
in, you will have to copy the old session data into the new session.
You can do this by retrieving the session data before you log in
the user using the login() function of the Django authentication
system and storing it in the session after that.

Session settings::
SESSION_ENGINE. This setting allows you to set the place where
sessions are stored.
--by default the sessions are stored in database

options for stroing  sessions
• Database sessions: Session data is stored in the database. This is the default
session engine.
• File-based sessions: Session data is stored in the filesystem.
• Cached sessions: Session data is stored in a cache backend. You can specify
cache backends using the CACHES setting. Storing session data in a cache
system provides the best performance.
• Cached database sessions: Session data is stored in a write-through cache
and database. Reads only use the database if the data is not already in the
cache.
• Cookie-based sessions: Session data is stored in the cookies that are sent
to the browser.

For better performance use a cache-based session engine. Django
supports Memcached out of the box and you can find third-party
cache backends for Redis and other cache systems.

• SESSION_COOKIE_AGE: The duration of session cookies in seconds.
The default value is 1209600 (two weeks).
• SESSION_COOKIE_DOMAIN: The domain used for session cookies. Set this to
mydomain.com to enable cross-domain cookies or use None for a standard
domain cookie.
• SESSION_COOKIE_SECURE: A Boolean indicating that the cookie should only
be sent if the connection is an HTTPS connection.
• SESSION_EXPIRE_AT_BROWSER_CLOSE: A Boolean indicating that the session
has to expire when the browser is closed.
• SESSION_SAVE_EVERY_REQUEST: A Boolean that, if True, will save the session
to the database on every request. The session expiration is also updated each
time it's saved.

Session expiration::
You can choose to use browser-length sessions or persistent sessions using
the SESSION_EXPIRE_AT_BROWSER_CLOSE setting. This is set to False by default,
forcing the session duration to the value stored in the SESSION_COOKIE_AGE setting.
If you set SESSION_EXPIRE_AT_BROWSER_CLOSE to True, the session will expire
when the user closes the browser, and the SESSION_COOKIE_AGE setting will not
have any effect.
You can use the set_expiry() method of request.session to overwrite the
duration of the current session

Storing shopping carts in sessions::
--You need to create a simple structure that can be serialized to JSON for storing cart
items in a session.

the cart includes
• The ID of a Product instance
• The quantity selected for the product
• The unit price for the product

build functionality to create shopping carts and associate them
with sessions.
• When a cart is needed, you check whether a custom session key is set. If
no cart is set in the session, you create a new cart and save it in the cart
session key.
• For successive requests, you perform the same check and get the cart items
from the cart session key. You retrieve the cart items from the session and
their related Product objects from the database.

CART_SESSION_ID = 'cart' in setting.py
--This is the key that you are going to use to store the cart in the user session. Since
Django sessions are managed per visitor, you can use the same cart session key for
all sessions.

create an application for managing shopping carts.
**************python manage.py startapp cart****************

create a new cart.py file in the cart application

--You will build your cart dictionary with product IDs as keys, and for each product
key, a dictionary will be a value that includes quantity and price.

--You use the product ID as a key in the cart's content dictionary. You convert the
product ID into a string because Django uses JSON to serialize session data, and
JSON only allows string key names. The product ID is the key, and the value
that you persist is a dictionary with quantity and price figures for the product