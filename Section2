Lecture 1:
Creating shopping cart views::
We need to implement a view which;
• A view to add or update items in the cart that can handle current and new
quantities
• A view to remove items from the cart
• A view to display cart items and totals

Adding items to the cart::
--In order to add items to the cart, you need a form that allows the user to select
a quantity.
-create aforms.py file

--create aview to mange the cart

Lecture 2:
Building a template to display the cart::
--need
to create a template for the cart_detail view to display cart items and totals

Adding products to the cart::
--need to add an Add to cart button to the product detail page.

Updating product quantities in the cart::
--When users see the cart, they might want to change product quantities before placing
an order. You are going to allow users to change quantities from the cart detail page.

Lecture 3:
Creating a context processor for the current cart
--you shd be able to show number of items in the cart and the total cost at the header section
--Since this has to be displayed
on all pages, you need to build a context processor to include the current cart in the
request context, regardless of the view that processes the request

Context processors::
--A context processor is a Python function that takes the request object as an
argument and returns a dictionary that gets added to the request context. Context
processors come in handy when you need to make something available globally
to all templates.

Setting the cart into the request context::
--Let's create a context processor to set the current cart into the request context.
With it, you will be able to access the cart in any template.

--create a contextprocessor.py file
--In your context processor, you instantiate the cart using the request object and make
it available for the templates as a variable named cart.

--Edit the settings.py file of your project and add cart.context_processors.cart
to the context_processors option inside the TEMPLATES setting,

--The cart context processor will be executed every time a template is rendered
using Django's RequestContext

--NB:
Context processors are executed in all the requests that use
RequestContext. You might want to create a custom template
tag instead of a context processor if your functionality is not
needed in all templates, especially if it involves database queries

Lecture 5:
Registering customer orders::
--When a shopping cart is checked out, you need to save an order into the database.
Orders will contain information about customers and the products they are buying.

--create a new app for managing orders

*******python manage.py startapp orders********

Creating order models::
--You will need a model to store the order details and a second model to store items
bought, including their price and quantity.

python manage.py makemigrations after writing the order model

***********python manage.py migrate******

pIncluding order models in the administration
site::
--Let's add the order models to the administration site
--You use a ModelInline class for the OrderItem model to include it as an inline
in the OrderAdmin class. An inline allows you to include a model on the same edit
page as its related model

Creating customer orders::
--You will use the order models that you created to persist the items contained in the
shopping cart when the user finally places an order.
A new order will be created following these steps:
• Present a user with an order form to fill in their data
• Create a new Order instance with the data entered, and create an associated
OrderItem instance for each item in the cart
• Clear all the cart's contents and redirect the user to a success page

in the views
Depending on the request method, you perform
the following tasks:
• GET request: Instantiates the OrderCreateForm form and renders the
orders/order/create.html template.
• POST request: Validates the data sent in the request. If the data is valid,
you create a new order in the database using order = form.save(). You
iterate over the cart items and create an OrderItem for each of them. Finally,
you clear the cart's contents and render the template orders/order/
created.html.

--Users can now navigate from the cart detail page to the order form.

Lecture 3:
Launching asynchronous tasks with Celery
--Everything you execute in a view affects response times. In many situations,
you might want to return a response to the user as quickly as possible and let the
server execute some process asynchronously. This is especially relevant for timeconsuming
processes or processes subject to failure, which might need a retry
policy

--Celery is a distributed task queue that can process vast amounts of messages. Using
Celery, not only can you create asynchronous tasks easily and let them be executed
by workers as soon as possible, but you can also schedule them to run at a specific
time

Installing Celery::
****************pip install celery==4.4.2****************

--Celery requires a message broker in order to handle requests from an external
source. A message broker is used to translate messages to a formal messaging
protocol and manage message queues for multiple receivers, providing reliable
storage and guaranteed message delivery. You use a message broker to send
messages to Celery workers, which process tasks as they receive them

Installing RabbitMQ::
--https://www.rabbitmq.com/download.html

start rabbitmq-server
Adding Celery to your project::
--You have to provide a configuration for the Celery instance
-create a file near settings.py called celery.py

--You set the DJANGO_SETTINGS_MODULE variable for the Celery command-line
program.

--You need to import the celery module in the __init__.py file of your project to
make sure it is loaded when Django starts

--Edit the core/__init__.py

--The CELERY_ALWAYS_EAGER setting allows you to execute tasks
locally in a synchronous way, instead of sending them to the queue.
This is useful for running unit tests or executing the application in
your local environment without running Celery.

Adding asynchronous tasks to your application::
--create an asynchronous task to send an email notification to
your users when they place an order. The convention is to include asynchronous
tasks for your application in a tasks module within your application directory.

--create a tasks.py file
--task. Your task function
receives an order_id parameter. It's always recommended to only pass IDs to task
functions and lookup objects when the task is executed.

--If you don't want to set up email settings,
you can tell Django to write emails to the console by adding the following setting to
the settings.py file:
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

NB:
Use asynchronous tasks not only for time-consuming processes,
but also for other processes that do not take so much time to be
executed but which are subject to connection failures or require
a retry policy.

--start the Celery worker from your project directory, using
the following command:
****************************celery -A core worker -l info*******************


Monitoring Celery::
--You might want to monitor the asynchronous tasks that are executed. Flower is a
web-based tool for monitoring Celery.

***************pip install flower==0.9.3****************************


to run flower
***********celery -A core flower***************

open http://localhost:5555/dashboard to see
the active Celery workers and asynchronous task statistics:

