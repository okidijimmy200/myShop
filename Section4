Lecture 1:
Exporting orders to CSV files
--Sometimes, you might want to export the information contained in a model to a file
so that you can import it in another system. One of the most widely used formats
to export/import data is comma-separated values (CSV).

Adding custom actions to the administration site:
--Django offers a wide range of options to customize the administration site. You are
going to modify the object list view to include a custom administration action.

--An administration action works as follows: a user selects objects from the
administration object list page with checkboxes, then they select an action to perform
on all of the selected items, and execute the actions.

--You can create a custom action by writing a regular function that receives the following parameters:
• The current ModelAdmin being displayed
• The current request object as an HttpRequest instance
• A QuerySet for the objects selected by the user

--This function will be executed when the action is triggered from the
administration site

--You are going to create a custom administration action to download a list of orders
as a CSV file

--edit the admin of order file
create export_to_csv function

--add the new export_to_csv administration action to the OrderAdmin class

--Select some orders and choose the Export to CSV action from the select box, then
click the Go button. Your browser will download the generated CSV file named
order.csv. Open the downloaded file using a text editor. You should see content
with the following format, including a header row and a row for each Order object
you selected

Lecture 2:
Extending the administration site with custom views
--Sometimes, you may want to customize the administration site beyond what is
possible through configuring ModelAdmin, creating administration actions, and
overriding administration templates. You might want to implement additional
functionalities that are not available in existing administration views or templates.

--If this is the case, you need to create a custom administration view. With a custom
view, you can build any functionality you want; you just have to make sure that only
staff users can access your view and that you maintain the administration look and
feel by making your template extend an administration template.

--to create a custom view, edit the view of orderfile

NB:
You can also override an administration template if you need to. To do so, copy
a template into your templates/ directory, keeping the same relative path and
filename. Django's administration site will use your custom template instead of
the default one

--Avoid using mark_safe on input that has come from the user to
avoid cross-site scripting (XSS). XSS enables attackers to inject
client-side scripts into web content viewed by other users.

--in the admin page, each row now has a link