Lecture 1:
Exporting orders to CSV files
--Sometimes, you might want to export the information contained in a model to a file
so that you can import it in another system. One of the most widely used formats
to export/import data is comma-separated values (CSV).

Adding custom actions to the administration site:
--Django offers a wide range of options to customize the administration site. You are
going to modify the object list view to include a custom administration action.

--An administration action works as follows: a user selects objects from the
administration object list page with checkboxes, then they select an action to perform
on all of the selected items, and execute the actions.

--You can create a custom action by writing a regular function that receives the following parameters:
• The current ModelAdmin being displayed
• The current request object as an HttpRequest instance
• A QuerySet for the objects selected by the user

--This function will be executed when the action is triggered from the
administration site

--You are going to create a custom administration action to download a list of orders
as a CSV file

--edit the admin of order file
create export_to_csv function

--add the new export_to_csv administration action to the OrderAdmin class

--Select some orders and choose the Export to CSV action from the select box, then
click the Go button. Your browser will download the generated CSV file named
order.csv. Open the downloaded file using a text editor. You should see content
with the following format, including a header row and a row for each Order object
you selected

Lecture 2:
Extending the administration site with custom views
--Sometimes, you may want to customize the administration site beyond what is
possible through configuring ModelAdmin, creating administration actions, and
overriding administration templates. You might want to implement additional
functionalities that are not available in existing administration views or templates.

--If this is the case, you need to create a custom administration view. With a custom
view, you can build any functionality you want; you just have to make sure that only
staff users can access your view and that you maintain the administration look and
feel by making your template extend an administration template.

--to create a custom view, edit the view of orderfile

NB:
You can also override an administration template if you need to. To do so, copy
a template into your templates/ directory, keeping the same relative path and
filename. Django's administration site will use your custom template instead of
the default one

--Avoid using mark_safe on input that has come from the user to
avoid cross-site scripting (XSS). XSS enables attackers to inject
client-side scripts into web content viewed by other users.

--in the admin page, each row now has a link

Lecture 3:
Generating PDF invoices dynamically::
--Now that you have a complete checkout and payment system, you can generate
a PDF invoice for each order.

--One popular library to generate PDFs with Python code is ReportLab.

--In most cases, you will have to add custom styles and formatting to your PDF
files. You will find it more convenient to render an HTML template and convert it
into a PDF file, keeping Python away from the presentation layer.

--we will use weasyprint to generate PDF files

Installing WeasyPrint::
--First, install WeasyPrint's dependencies for your operating system from https://
weasyprint.readthedocs.io/en/latest/install.html.

--, WeasyPrint needs the Pango, cairo and GDK-PixBuf libraries. They are required for the graphical stuff: Text and image rendering.

*****python -m pip install --upgrade pip setuptools********

****pip install WeasyPrint==51*****

Creating a PDF template::
--You need an HTML document as input for WeasyPrint. You are going to create an
HTML template, render it using Django, and pass it to WeasyPrint to generate the
PDF file.
--This is the template for the PDF invoice. In this template, you display all order
details and an HTML <table> element including the products. You also include
a message to display whether the order has been paid.

Rendering PDF files::
--You are going to create a view to generate PDF invoices for existing orders using the
administration site

--Since you need to use the STATIC_ROOT setting, you have to add it to your project.
This is the project's path where static files reside. Edit the settings.py file of the
myshop project

--Then, run the following command:
***************python manage.py collectstatic*************

--The collectstatic command copies all static files from your applications into the
directory defined in the STATIC_ROOT setting.

--This allows each application to provide
its own static files using a static/ directory containing them. You can also provide
additional static files sources in the STATICFILES_DIRS setting. All of the directories
specified in the STATICFILES_DIRS list will also be copied to the STATIC_ROOT
directory when collectstatic is executed. Whenever you execute collectstatic
again, you will be asked if you want to override the existing static files.

--Now you can edit the administration list display page for the Order model to
add a link to the PDF file for each result.

--Ensure the development server is started. Open http://127.0.0.1:8000/admin/
orders/order/ in your browser.

Lecture 4:
Sending PDF files by email::
--When a payment is successful, you will send an automatic email to your customer
including the generated PDF invoice. You will create an asynchronous task to
perform this action.

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' incase you want to write
emails to the console else implement the email setting

--You call the payment_completed task when a payment is successfully completed.
Then, you call the delay() method of the task to execute it asynchronously. The
task will be added to the queue and will be executed by a Celery worker as soon
as possible.
