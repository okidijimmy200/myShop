Extending Your Shop
--In this chapter, you will add a coupon system to your shop. You will also learn how
internationalization and localization work, and you will build a recommendation
engine

This chapter will cover the following points:
• Creating a coupon system to apply discounts
• Adding internationalization to your project
• Using Rosetta to manage translations
• Translating models using django-parler
• Building a product recommendation engine

Lecture 1:
Creating a coupon system:
--Many online shops give out coupons to customers that can be redeemed for
discounts on their purchases. An online coupon usually consists of a code that is
given to users and is valid for a specific time frame.

--You are going to create a coupon system for your shop. Your coupons will be valid
for customers in a certain time frame. The coupons will not have any limitations
in terms of the number of times they can be redeemed,
--you will need to create
a model to store the coupon code, a valid time frame, and the discount to apply

Create a new application inside the myshop project using the following command:

************python manage.py startapp coupons****************

Building the coupon model::
Run the following command to generate the initial migration for the coupons
application:
**************python manage.py makemigrations***********

Then, execute the next command to apply migrations:
******************python manage.py migrate***************

--add the coupon to the adminstration site

--fill in the coupon form

Lecture 2:
Applying a coupon to the shopping cart::
You can store new coupons and make queries to retrieve existing coupons. Now
you need a way for customers to apply coupons to their purchases. The functionality
to apply a coupon would be as follows:
1. The user adds products to the shopping cart.
2. The user can enter a coupon code in a form displayed on the shopping
cart detail page
3. When the user enters a coupon code and submits the form, you look for
an existing coupon with the given code that is currently valid. You have
to check that the coupon code matches the one entered by the user, that the
active attribute is True, and that the current datetime is between the valid_
from and valid_to values.
4. If a coupon is found, you save it in the user's session and display the cart,
including the discount applied to it and the updated total amount.
5. When the user places an order, you save the coupon to the given order.

--create a forms.py file in the coupon directory

-You need a URL pattern for the coupon_apply view. Create a new file inside the
coupons application directory and name it urls.py.

--add the coupon to the next step of the purchase process. Edit the orders/
order/create.html template

--http://127.0.0.1:8000/orders/create/

Lecture 3:
Applying coupons to orders::
--You are going to store the coupon that was applied to each order.
edit the models of order file

You need to create a migration to include the new fields of the Order model. Run the
following command from the command line:
********************python manage.py makemigrations*******************

Apply the new migration with the following command:
*****************python manage.py migrate orders************

make an order


