Lecture 1:
Translating templates::
--Django offers the {% trans %} and {% blocktrans %} template tags to translate
strings in templates. In order to use the translation template tags, you have to add
{% load i18n %} at the top of your template to load them.

The {% trans %} template tag::
--The {% trans %} template tag allows you to mark a literal for translation. Internally,
Django executes gettext() on the given text.

--{% trans "Text to be translated" %}

--You can use as to store the translated content in a variable that you can use
throughout your template.

--{% trans "Hello!" as greeting %}
<h1>{{ greeting }}</h1>

--The {% trans %} tag is useful for simple translation strings, but it can't handle
content for translation that includes variables.

The {% blocktrans %} template tag::
--The {% blocktrans %} template tag allows you to mark content that includes
literals and variable content using placeholders.

eg
{% blocktrans %}Hello {{ name }}!{% endblocktrans %}

NB:
Use the {% blocktrans %} tag instead of {% trans %} when
you need to include variable content in your translation string.

Lecture 2
Translating the shop templates::
--Edit the shop/base.html template of the shop application.

Let's update the message files to include the new translation strings.

***************************django-admin makemessages --all**********************************

--The .po files are inside the locale directory of the myshop project and you'll see that
the orders application now contains all the strings that you marked for translation

--Edit the .po translation files of the project and the orders application, and include
Spanish translations in the msgstr

Lecture 3:
Using the Rosetta translation interface::
--Rosetta is a third-party application that allows you to edit translations using
the same interface as the Django administration site. Rosetta makes it easy to
edit .po files and it updates compiled translation files

**************pip install django-rosetta==0.9.3*************8

--You need to add Rosetta's URLs to your main URL configuration

--Open http://127.0.0.1:8000/admin/ and log in with a superuser.
-then navigate to http://127.0.0.1:8000/rosetta/

--In the Filter menu, click
THIRD PARTY to display all the available message files, including those that belong
to the orders application.

--Click the Myshop link under the Spanish section to edit the Spanish translations.
You should see a list of translation strings

--If you want other users to be able to edit translations, open
http://127.0.0.1:8000/admin/auth/group/add/ in your browser and create
a new group named translators.

When you add new translations to your production environment,
if you serve Django with a real web server, you will have to reload
your server after running the compilemessages command, or
after saving the translations with Rosetta, for changes to take effect.

Lecture 2:
Fuzzy translations::
--You might have noticed that there is a FUZZY column in Rosetta. This is not
a Rosetta feature; it is provided by gettext. If the fuzzy flag is active for a translation,
it will not be included in the compiled message files.
--This flag marks translation strings that need to be reviewed by a translator.

URL patterns for internationalization::
Django offers internationalization capabilities for URLs. It includes two main
features for internationalized URLs:
• Language prefix in URL patterns: Adding a language prefix to URLs
to serve each language version under a different base URL
• Translated URL patterns: Translating URL patterns so that every URL
is different for each language

--A reason for translating URLs is to optimize your site for search engines. By
adding a language prefix to your patterns, you will be able to index a URL for each
language instead of a single URL for all of them.

Adding a language prefix to URL patterns::
--Django allows you to add a language prefix to your URL patterns. For example,
the English version of your site can be served under a path starting /en/, and the
Spanish version under /es/.

--languages in URL patterns, you have to use
the LocaleMiddleware provided by Django. The framework will use it to identify
the current language from the requested URL.

--You can combine non-translatable standard URL patterns and patterns under
i18n_patterns so that some patterns include a language prefix and others don't.

Translating URL patterns::
--Django supports translated strings in URL patterns. You can use a different
translation for each language for a single URL pattern. You can mark URL patterns
for translation in the same way as you would with literals, using the gettext_
lazy() function.

Open the shell and run the next command to update the message files with the new
translations:
*********************django-admin makemessages --all****************

--Open http://127.0.0.1:8000/en/rosetta/ in your browser and click the Myshop link under the Spanish section