Lecture 1:
Translating templates::
--Django offers the {% trans %} and {% blocktrans %} template tags to translate
strings in templates. In order to use the translation template tags, you have to add
{% load i18n %} at the top of your template to load them.

The {% trans %} template tag::
--The {% trans %} template tag allows you to mark a literal for translation. Internally,
Django executes gettext() on the given text.

--{% trans "Text to be translated" %}

--You can use as to store the translated content in a variable that you can use
throughout your template.

--{% trans "Hello!" as greeting %}
<h1>{{ greeting }}</h1>

--The {% trans %} tag is useful for simple translation strings, but it can't handle
content for translation that includes variables.

The {% blocktrans %} template tag::
--The {% blocktrans %} template tag allows you to mark content that includes
literals and variable content using placeholders.

eg
{% blocktrans %}Hello {{ name }}!{% endblocktrans %}

NB:
Use the {% blocktrans %} tag instead of {% trans %} when
you need to include variable content in your translation string.

Lecture 2
Translating the shop templates::
--Edit the shop/base.html template of the shop application.

Let's update the message files to include the new translation strings.

***************************django-admin makemessages --all**********************************

--The .po files are inside the locale directory of the myshop project and you'll see that
the orders application now contains all the strings that you marked for translation

--Edit the .po translation files of the project and the orders application, and include
Spanish translations in the msgstr

Lecture 3:
Using the Rosetta translation interface::
--Rosetta is a third-party application that allows you to edit translations using
the same interface as the Django administration site. Rosetta makes it easy to
edit .po files and it updates compiled translation files

**************pip install django-rosetta==0.9.3*************8

--You need to add Rosetta's URLs to your main URL configuration

--Open http://127.0.0.1:8000/admin/ and log in with a superuser.
-then navigate to http://127.0.0.1:8000/rosetta/

--In the Filter menu, click
THIRD PARTY to display all the available message files, including those that belong
to the orders application.

Lecture 4:
Allowing users to switch language::
--Since you are serving content that is available in multiple languages, you should
let your users switch the site's language. You are going to add a language selector to
your site.



--Click the Myshop link under the Spanish section to edit the Spanish translations.
You should see a list of translation strings

--If you want other users to be able to edit translations, open
http://127.0.0.1:8000/admin/auth/group/add/ in your browser and create
a new group named translators.

When you add new translations to your production environment,
if you serve Django with a real web server, you will have to reload
your server after running the compilemessages command, or
after saving the translations with Rosetta, for changes to take effect.

Lecture 5:
Fuzzy translations::
--You might have noticed that there is a FUZZY column in Rosetta. This is not
a Rosetta feature; it is provided by gettext. If the fuzzy flag is active for a translation,
it will not be included in the compiled message files.
--This flag marks translation strings that need to be reviewed by a translator.

URL patterns for internationalization::
Django offers internationalization capabilities for URLs. It includes two main
features for internationalized URLs:
• Language prefix in URL patterns: Adding a language prefix to URLs
to serve each language version under a different base URL
• Translated URL patterns: Translating URL patterns so that every URL
is different for each language

--A reason for translating URLs is to optimize your site for search engines. By
adding a language prefix to your patterns, you will be able to index a URL for each
language instead of a single URL for all of them.

Adding a language prefix to URL patterns::
--Django allows you to add a language prefix to your URL patterns. For example,
the English version of your site can be served under a path starting /en/, and the
Spanish version under /es/.

--languages in URL patterns, you have to use
the LocaleMiddleware provided by Django. The framework will use it to identify
the current language from the requested URL.

--You can combine non-translatable standard URL patterns and patterns under
i18n_patterns so that some patterns include a language prefix and others don't.

Translating URL patterns::
--Django supports translated strings in URL patterns. You can use a different
translation for each language for a single URL pattern. You can mark URL patterns
for translation in the same way as you would with literals, using the gettext_
lazy() function.

Open the shell and run the next command to update the message files with the new
translations:
*********************django-admin makemessages --all****************

--Open http://127.0.0.1:8000/en/rosetta/ in your browser and click the Myshop link under the Spanish section

Lecture 6:
Translating models with django-parler
--Django does not provide a solution for translating models out of the box. You have
to implement your own solution to manage content stored in different languages,

--This module offers a very effective way to translate models and it integrates
smoothly with Django's administration site

--django-parler generates a separate database table for each model that contains
translations. This table includes all the translated fields and a foreign key for the
original object that the translation belongs to

Installing django-parler
******pip install django-parler==2.0.1***********

Lecture 7:
Translating model fields::
--Let's add translations for your product catalog. django-parler provides
a TranslatableModel model class and a TranslatedFields wrapper to translate
model fields.

--django-parler manages translations by generating another model for each
translatable model.

--The ProductTranslation model generated by django-parler includes the
name, slug, and description translatable fields, a language_code field, and
a ForeignKey for the master Product object. There is a one-to-many relationship
from Product to ProductTranslation. A ProductTranslation object will exist
for each available language of each Product object.

--Since Django uses a separate table for translations, there are some Django features
that you can't use. It is not possible to use a default ordering by a translated field.
You can filter by translated fields in queries, but you can't include a translatable
field in the ordering Meta options

Lecture 6:
Integrating translations into the administration site::
--django-parler integrates smoothly with the Django administration site. It includes
a TranslatableAdmin class that overrides the ModelAdmin class provided by Django
to manage model translations

Creating migrations for model translations::
********python manage.py makemigrations shop --name "translations"***********

--This migration automatically includes the CategoryTranslation and
ProductTranslation models created dynamically by django-parler. It's important
to note that this migration deletes the previous existing fields from your models. This
means that you will lose that data and will need to set your categories and products
again in the administration site after running it.
--Edit the file migrations/0002_translations.py of the shop application and
replace the two occurrences of the following line:

bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
with the following one:
bases=(parler.models.TranslatableModel, models.Model),

--to fix an issue with a bug.
--*************python manage.py migrate shop***********


--Run the development server using python manage.py runserver and open
http://127.0.0.1:8000/en/admin/shop/category/ in your browser. You will
see that existing categories lost their name and slug due to deleting those fields
and using the translatable models generated by django-parler instead. Click
on a category to edit it. You will see that the Change category page includes two
different tabs, one for English and one for Spanish translations:

--After completing the data for existing categories, open http://127.0.0.1:8000/
en/admin/shop/product/ and edit each of the products, providing an English and
Spanish name, a slug, and a description.

Adapting views for translations::
*******python manage.py shell*******

--Let's take a look at how you can retrieve and query translation fields. To get the
object with translatable fields translated in a specific language, you can use Django's
activate() function
>>> from shop.models import Product
>>> from django.utils.translation import activate
>>> activate('es')
>>> product=Product.objects.first()
>>> product.name
'Té verde'

--Another way to do this is by using the language() manager provided by djangoparler,
as follows:
>>> product=Product.objects.language('en').first()
>>> product.name
'Green tea'

--When you access translated fields, they are resolved using the current language.
You can set a different current language for an object to access that specific
translation, as follows:
>>> product.set_current_language('es')
>>> product.name
'Té verde'
>>> product.get_current_language()
'es'

--When performing a QuerySet using filter(), you can filter using the related
translation objects with the translations__ syntax, as follows:
>>> Product.objects.filter(translations__name='Green tea')
<TranslatableQuerySet [<Product: Té verde>]>

--Edit the views.py file in the product catalog

--Now, each product's URL is built using the slug field translated into
the current language. For example, the URL for a product in Spanish is
http://127.0.0.1:8000/es/2/te-rojo/, whereas in English, the URL is
http://127.0.0.1:8000/en/2/red-tea/

Lecture 7:
Format localization:
--Depending on the user's locale, you might want to display dates, times, and numbers
in different formats. Localized formatting can be activated by changing the USE_L10N
setting to True in the settings.py file of your project.

--Django offers a {% localize %} template tag that allows you to turn on/off
localization for template fragments. This gives you control over localized formatting.
You will have to load the l10n tags to be able to use this template tag.

Using django-localflavor to validate form fields:
--django-localflavor is a third-party module that contains a collection of utils, such
as form fields or model fields, that are specific for each country

********pip install django-localflavor==3.0.1******
--You are going to add the United States' zip code field so that a valid United States
zip code is required to create a new order.

--Run the development server and open http://127.0.0.1:8000/en/orders/
create/ in your browser. Fill in all fields, enter a three-letter zip code, and
then submit the form.

--This is just a brief example of how to use a custom field from localflavor in
your own project for validation purposes. The local components provided by
localflavor are very useful for adapting your application to specific countries.



