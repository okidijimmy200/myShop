"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r4$q+r90$3_^-dqdrbg1n821xw31da==i2gpbrx$b!v0%4ma5%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shop.apps.ShopConfig',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'payment.apps.PaymentConfig',
    'coupons.apps.CouponsConfig',
    'rosetta',
    'parler',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',
                
            ],
        },
    },
]
'''
explanations for the context_processors:
# django.template.context_processors.debug: This sets the Boolean debug and sql_queries variables in the context, representing the list of SQL queries executed in the request
# django.template.context_processors.request:This sets the request variable in the context
# django.contrib.auth.context_processors.auth: This sets the user variable in the request
# django.contrib.messages.context_processors.messages: This sets a messages variable in the context containing all the messages that have
been generated using the messages framework
'''
WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

'''Here, you use the gettext_lazy() function instead of gettext() to avoid a circular
import, thus translating the languages' names when they are accessed.'''
from django.utils.translation import gettext_lazy as _

# The LANGUAGES setting contains two tuples that consist of a language code and a name
LANGUAGES = (
    ('en', _('English')),
    ('es', _('Spanish')),
)
'''This setting defines the available languages, en and es, for django-parler. You
specify the default language en and indicate that django-parler should not hide
untranslated content.'''
PARLER_LANGUAGES = {
    None: (
        {'code': 'en'},
        {'code': 'es'},
    ),
    'default': {
        'fallback': 'en',
        'hide_untranslated': False,
    }
}

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

'''
***MEDIA_URL is the base URL that serves media files uploaded by users.
***MEDIA_ROOT is the local path where these files reside, which you build by dynamically prepending
the BASE_DIR variable.
'''
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

'''This is the key that you are going to use to store the cart in the user session.'''
CART_SESSION_ID = 'cart'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

'''You use Environment.Sandbox for integrating the
sandbox. Once you go live and create a real account, you will
need to change this to Environment.Production. Braintree
will provide you with a new merchant ID and private/public keys
for the production environment'''

# Braintree settings
BRAINTREE_MERCHANT_ID = 'z7jjywzz4zxjv4s8'  # Merchant ID
BRAINTREE_PUBLIC_KEY = 'y78zqqth9cp39s29'   # Public Key
BRAINTREE_PRIVATE_KEY = 'c8e91874fce7225df2803cc645d24f39'  # Private key

import braintree

BRAINTREE_CONF = braintree.Configuration(
    braintree.Environment.Sandbox,
    BRAINTREE_MERCHANT_ID,
    BRAINTREE_PUBLIC_KEY,
    BRAINTREE_PRIVATE_KEY
)

# project's path where statci files reside
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

'''The LOCALE_PATHS setting specifies the directories where Django has to look for
translation files. Locale paths that appear first have the highest precedence'''

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)