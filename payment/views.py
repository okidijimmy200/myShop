import braintree
from django.shortcuts import render, redirect, get_object_or_404
from django.conf import settings
from orders.models import Order
from .tasks import payment_completed


# instantiate Braintree payment gateway
'''In the previous code, you import the braintree module and create an instance of
the Braintree gateway using BraintreeGateway(), with the configuration defined
in the BRAINTREE_CONF setting of the project.'''
gateway = braintree.BraintreeGateway(settings.BRAINTREE_CONF)

# The payment_process view manages the checkout process.
def payment_process(request):
# You get the current order from the order_id session key, which was stored previously in the session by the order_create view.
    order_id = request.session.get('order_id')
# You retrieve the Order object for the given ID or raise an Http404 exception if it is not found.
    order = get_object_or_404(Order, id=order_id)
    total_cost = order.get_total_cost()

    if request.method == 'POST':
        # retrieve nonce
# When the view is loaded with a POST request, you retrieve the payment_ method_nonce to generate a new transaction using gateway.transaction. sale().
        nonce = request.POST.get('payment_method_nonce', None)
        # create and submit transaction
        result = gateway.transaction.sale({
# u pass the parameters 
# amount: The total amount to charge the customer. This is a string with the total amount formatted with two decimal places.
            'amount': f'{total_cost:.2f}',
# payment_method_nonce: The token nonce generated by Braintree for the payment. It will be generated in the template using the Braintree JavaScript SDK.
            'payment_method_nonce': nonce,
# options: You send the submit_for_settlement option with True so that the transaction is automatically submitted for settlement.
            'options': {
                'submit_for_settlement': True
            }
        })
# If the transaction is successfully processed, you mark the order as paid by setting its paid attribute to True and store the unique transaction ID returned
# by the gateway in the braintree_id attribute.
        if result.is_success:
            # mark the order as paid
            order.paid = True
            # store the unique transaction id
            order.braintree_id = result.transaction.id
            order.save()
            # launch asynchronous task
# You call the payment_completed task when a payment is successfully completed. Then, you call the delay() method of the task to execute it asynchronously. The
# task will be added to the queue and will be executed by a Celery worker as soon as possible.
            payment_completed.delay(order.id)
# You redirect the user to the payment:done URL if the payment is successful; otherwise, you redirect
# them to payment:canceled.
            return redirect('payment:done')
        else:
            return redirect('payment:canceled')
    else:
# If the view was loaded with a GET request, generate a client token with gateway.client_token.generate() that you will use in the template
# to instantiate the Braintree JavaScript client
        # generate token
        client_token = gateway.client_token.generate()
        return render(request,
                      'payment/process.html',
                      {'order': order,
                       'client_token': client_token})

# views to redirect users when their payment has been successful,
def payment_done(request):
    return render(request, 'payment/done.html')

# views to redirect users when their payment has been cancelled
def payment_canceled(request):
    return render(request, 'payment/canceled.html')
